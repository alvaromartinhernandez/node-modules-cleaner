# Translation dictionary for multilingual support
$translations = @{
    "en" = @{
        "EnterPath" = "Enter the path to search for 'node_modules' folders (leave empty to use 'C:\', this can be VERY slow)"
        "InvalidPath" = "The path '{0}' does not exist. Please check the path and try again."
        "ShowLog" = "Do you want to show the details of each processed folder? (y/n)"
        "NoFoldersFound" = "No 'node_modules' folders were found in the specified path."
        "TotalSpace" = "Total space occupied by 'node_modules':"
        "DeletePrompt" = "Do you want to delete all found 'node_modules' folders? (y/n)"
        "Deleted" = "All 'node_modules' folders have been deleted."
        "NoDelete" = "No folders have been deleted. Only the occupied space has been calculated."
        "InvalidOption" = "Invalid option. No folders have been deleted."
        "PathHint" = "Tip: Use a shorter path for faster scans."
    }
    "es" = @{
        "EnterPath" = "Introduce la ruta para buscar carpetas 'node_modules' (déjalo vacío para usar 'C:\', esto puede ser MUY lento)"
        "InvalidPath" = "La ruta '{0}' no existe. Por favor, verifica la ruta e inténtalo de nuevo."
        "ShowLog" = "¿Quieres mostrar los detalles de cada carpeta procesada? (s/n)"
        "NoFoldersFound" = "No se encontraron carpetas 'node_modules' en la ruta especificada."
        "TotalSpace" = "Espacio total ocupado por 'node_modules':"
        "DeletePrompt" = "¿Quieres eliminar todas las carpetas 'node_modules' encontradas? (s/n)"
        "Deleted" = "Todas las carpetas 'node_modules' han sido eliminadas."
        "NoDelete" = "No se ha eliminado ninguna carpeta. Solo se ha calculado el espacio ocupado."
        "InvalidOption" = "Opción no válida. No se ha eliminado ninguna carpeta."
        "PathHint" = "Sugerencia: Usa una ruta más corta para escaneos más rápidos."
    }
}

# Default to English if the system language is unsupported
$language = [System.Globalization.CultureInfo]::CurrentUICulture.TwoLetterISOLanguageName
if (-not $translations.ContainsKey($language)) { $language = "en" }

# Helper function for translations
function T {
    param ($key, [array]$args)
    if ($args) {
        return [string]::Format($translations[$language][$key], $args)
    } else {
        return $translations[$language][$key]
    }
}

# Helper function to prompt a yes/no question
function Get-YesNoInput {
    param ($message)
    do {
        $response = Read-Host $message
    } while ($response -notmatch '^(y|n|s)$')
    return $response -match '^(y|s)$'
}

# Helper function to calculate folder size
function Get-FolderSize {
    param ($path)
    return (Get-ChildItem -Path $path -Recurse -Force -ErrorAction SilentlyContinue | Measure-Object -Property Length -Sum).Sum
}

# Prompt the user for the base path
$basePath = Read-Host (T "EnterPath")
if ([string]::IsNullOrWhiteSpace($basePath)) { $basePath = "C:\Users\Alvaro\Desktop" }

# Ensure the path exists and is valid
if (!(Test-Path $basePath)) {
    Write-Host (T "InvalidPath" $basePath) -ForegroundColor Red
    exit
}

# Find all 'node_modules' folders
$nodeModules = Get-ChildItem -Path $basePath -Recurse -Directory -Force -ErrorAction SilentlyContinue | Where-Object { $_.Name -eq "node_modules" }
if (-not $nodeModules) {
    Write-Host (T "NoFoldersFound") -ForegroundColor Yellow
    exit
}

# Ask the user whether to show logs
$showLog = Get-YesNoInput (T "ShowLog")

# Calculate the total size
$totalSize = 0
foreach ($folder in $nodeModules) {
    $size = Get-FolderSize -path $folder.FullName
    $totalSize += $size

    if ($showLog) {
        Write-Host "Folder: $($folder.FullName) - Size: $([math]::Round($size / 1MB, 2)) MB"
    }
}

# Display the total size
$totalSizeGB = [math]::Round($totalSize / 1GB, 2)
Write-Host "$(T 'TotalSpace') $totalSizeGB GB" -ForegroundColor Green

# Ask the user whether to delete the folders
if (Get-YesNoInput (T "DeletePrompt")) {
    foreach ($folder in $nodeModules) {
        Remove-Item -Path $folder.FullName -Recurse -Force -ErrorAction SilentlyContinue
        if ($showLog) {
            Write-Host "Deleted folder: $($folder.FullName)" -ForegroundColor Cyan
        }
    }
    Write-Host (T "Deleted") -ForegroundColor Green
} else {
    Write-Host (T "NoDelete") -ForegroundColor Yellow
}